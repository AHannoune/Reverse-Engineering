# Architecture processeur

## Sommaire
*  [Introduction](https://github.com/MalweenLeGoffic/Reverse-Engineering/wiki/Ressources_Architecture-Processeur#introduction)
*  [Rappels](https://github.com/MalweenLeGoffic/Reverse-Engineering/wiki/Ressources_Architecture-Processeur#rappels)
*  [Le processeur](https://github.com/MalweenLeGoffic/Reverse-Engineering/wiki/Ressources_Architecture-Processeur#le-processeur)
*  [Les registres](https://github.com/MalweenLeGoffic/Reverse-Engineering/wiki/Ressources_Architecture-Processeur#les-registres)
*  [La mémoire](https://github.com/MalweenLeGoffic/Reverse-Engineering/wiki/Ressources_Architecture-Processeur#la-m%C3%A9moire)
*  [Exécution d'un programme](https://github.com/MalweenLeGoffic/Reverse-Engineering/wiki/Ressources_Architecture-Processeur#ex%C3%A9cution-dun-programme)
*  [Les architectures 32 bits et 64 bits](https://github.com/MalweenLeGoffic/Reverse-Engineering/wiki/Ressources_Architecture-Processeur#les-architectures-32-bits-et-64-bits)
*  [Sources](https://github.com/MalweenLeGoffic/Reverse-Engineering/wiki/Ressources_Architecture-Processeur#sources)

## Introduction
L'assembleur est le langage lisible par un humain représentant le langage machine (binaire). Connaître et comprendre l'assembleur permet une compréhension plus générale du fonctionnement des composants comme le processeur et ses registres ou encore la mémoire ainsi que des rouages internes liés aux langages de développement. De plus, il s'agit d'un prérequis indispensable à la résolution des challenges de type _cracking_ et _reverse engineering_.

## Rappels
Tout d'abord quelques rappels pour partir sur de bonnes bases :
* **Bit** : unité la plus simple ne pouvant prendre que deux valeurs, 0 ou 1.
* **Octet** : groupe de 8 bits.
* **Mot (word)** : groupe de 2 octets, soit 16 bits.
* **Double Mot (dword)** : groupe de 4 octets, soit 32 bits.
* **Quadruple Mot (qword)** : groupe de 8 octets, soit 64 bits.

## Le processeur
Un processeur est un ensemble de composants permettant d’exécuter des instructions en langage machine. Pour cela il est composé des éléments principaux suivants :
* **Le séquenceur** : permet principalement de décoder la prochaine instruction à exécuter.
* **UAL (Unité Arithmétique et Logique)** : permet d’effectuer des calculs arithmétiques et logique.
* **Les registres** : mémoires internes du processeur permettant de ne pas utiliser la mémoire (RAM) pour chaque opération. En effet plus la mémoire est proche du processeur plus l’accès y est rapide.
* **Bus d’adresses, de données** : permet de véhiculer les informations pour l’accès aux zones mémoires (bus d'adresse) ou des données à lire ou écrire (bus de données).

## Les registres
Les registres sont des emplacements mémoire internes au processeur qui peuvent stocker des données ou des adresses. Les instructions en assembleur permettent d’adresser ces registres. Pour facilité cela, chaque registre possède un nom permettant de les identifier.

### Les différents registres
* Registres de travail
  * AX
  * BX
  * CX
  * DX
* Registres de segments
  * CS
  * DS
  * SS
  * ES
* Registres d’index
  * SI
  * DI
* Registres de pointeurs
  * IP
  * BP
  * SP
* Registre de drapeaux
  * FLAGS

Les registres de travail peuvent alors être découpés comme ceci :
* AX donne AH (poids fort, soit 8 bits car AX = 16 bits) et AL (poids faible, 8 bits).
* BX donne BH (poids fort, soit 8 bits car BX = 16 bits) et BL (poids faible, 8 bits).
* CX donne CH (poids fort, soit 8 bits car CX = 16 bits) et CL (poids faible, 8 bits).
* DX donne DH (poids fort, soit 8 bits car DX = 16 bits) et DL (poids faible, 8 bits).

### Leurs rôles

#### Les registres de travail
Les registres de travail sont destinés au calcul (résultat d’une opération, valeur intermédiaire etc), les lettres les identifiants ne sont pas sélectionnées au hasard, voici leur définition :
* A pour Accumulateur (Accumulator) : sert principalement à stocker des informations de calcul arithmétique et également la valeur de retour d’une fonction.
* B pour Base (Base) : sert principalement à stocker des adresses qui pointent vers une donnée présentes dans le segment DS.
* C pour Compteur (Counter) : sert principalement à stocker les variables de type compteur par exemple pour les itérations des boucles.
* D pour Données (Data) : utilisé lors des opérations d’entrées/sorties, et sert également conjointement à AX afin de stocker des informations de calcul arithmétique (extension de l’accumulateur).

#### Les registres de segments
* CS pour Code Segment : contient l’adresse du début du segment de code (espace d’adressage alloué _.text_) qui stocke les instructions du programme.
* DS pour Data Segment : contient l’adresse du début du segment de données (espace d’adressage alloué _.data_) qui stocke les variables globales et statiques initialisées.
* SS pour Stack Segment : contient l’adresse du début de la pile (espace d’adressage alloué _.stack_).
* ES pour Extended Segment : segment additionnel permettant de stocker des données et est souvent utilisé afin de manipuler des pointeurs sur les opérations de chaînes de caractères. 

**Note** : Il existe en fait également les segments FS et GS qui permettent également de stocker des données additionnelles.

#### Les registres d’index
* SI pour Source Index : pointe vers l’adresse source concernant les opérations sur les chaînes de caractères.
* DI pour Destination Index : pointe vers l’adresse de destination concernant les opérations sur les chaînes de caractères.

#### Les registres de pointeurs
* IP pour Instruction Pointer : ce registres stocke l’adresse de la prochaine instruction à exécuter. Dans la littérature il est également nommé Compteur Ordinal ou encore en anglais Programme Counter.
* BP pour Base Pointer : pointe vers l’adresse de la pile contenant les informations du contexte (ou frame), par exemple les informations propres à une fonction (variables locales, adresse de retour de la fonction). Ce registre est également appelé Frame Pointer.
* SP pour Stack Pointer : permet de stocker l’adresse du sommet de la pile. Il se met à jour suivant les instruction d’empilement et de dépilement (nommé respectivement _push_ et _pop_). Il pointe donc toujours vers le sommet de la pile.

#### Le registres de drapeaux
Le registre de drapeaux sert à indiquer une information spécifique. Chaque bit de ce registre indique une événement particulier. Pour donner quelques exemples voici les indicateurs que l’on rencontre souvent :
* ZF (Zero Flag ou Drapeau zéro) : indique le résultat d’une opération (arithmétique ou de comparaison). Si le drapeau ZF est à 1 alors le résultat de l’opération est 0 (bien sur, si le résultat est différent de 0 alors le drapeau est 0).
* CF (Carry Flag ou Drapeau de retenue) : ce drapeau permet d’indiquer lorsque une retenue est présente sur le bit le plus à gauche (bit significatif ou bit de poids fort) lors d’un calcul arithmétique. Il peut être utilisé pour indiquer une erreur de type débordement sur un calcul comprenant des entiers non signés. Il est également utilisé lors des rotations et décalages de bits. 
* OF (Overflow Flag ou Drapeau de débordement) : ce drapeau est à 1 si le résultat d’une opération ne peut tenir au sein du registre de destination.
* PF (Parity Flag ou Drapeau de parité) : ce drapeau est à 1 si le le nombre de bits à 1 composant le résultat est pair.

## La mémoire
La mémoire ne fait pas partie du processeur. Elle permet de stocker les données utilisées par l'ordinateur.

La taille de la mémoire dépend principalement de la taille du bus d'adresse :
* Un bus d'adresse de 8 bits donnera alors 256 (octets) cases adressables (2^8 = 256).
* Un bus d'adresse de 16 bits donnera alors 65536 (octets) cases adressables (2^16 = 65536), soit 64 Ko.
* Un bus d'adresse de 32 bits donnera alors 42949672964 (octets) cases adressables (2^32 = 42949672964), soit 4 Go.
* Un bus d'adresse de 64 bits donnera alors 18446744073709551616 (octets) cases adressables (2^64 = 18446744073709551616), soit 16384 Po.

### Les segments
La mémoire est divisée en 5 segments différents (dans cet ordre, adresses hautes au sommet de la mémoire) :
* **Stack** : la pile stocke des informations comme les variables locales ou encore les adresses de retour de ces fonctions. Sa taille est dynamique et évolue vers les adresses basses.
* **Heap** : le tas stocke les zones mémoires qui sont allouées dynamiquement par le développeur par des méthodes d'allocation et de libération mémoire (malloc() ou new() par exemple). Sa taille est dynamique et évolue vers les adresses hautes.
* **.bss** : stocke les variables globales et statiques non initialisées, l'écriture y est possible mais le segment possède une taille fixe.
* **.data** : stocke les variables globales et statiques initialisées, l'écriture y est possible mais le segment possède une taille fixe.
* **.text** : contient les instructions du programme en langage machine, l'écriture y est impossible et le segment possède une taille fixe. 

Pour visualiser cela, rien ne vaut un dessin :
![Schéma mémoire](https://github.com/MalweenLeGoffic/Reverse-Engineering/blob/master/.images/Ressources_Architecture-Processeur_memory.png)

**Note** : Une erreur de type _segmentation fault_ survient lorsque le programme tente d'accéder à une zone mémoire hors de ses segments.

### Zoom sur la pile
Maintenant que la mémoire est les registres sont connus il peut être nécessaire d'étudier de plus près le fonctionnement et le rôle de la pile.

La pile (_stack_) peut être imaginée comme une pile d’assiettes. Si l’on forme une telle pile, il faudra alors dépiler l’assiette la plus au sommet tout d’abord (qui est celle que l’on a mis sur la pile en dernière) pour à la fin accéder à la dernière assiette qui était la première à avoir été empilée. On nomme cela la méthode *LIFO* pour Last In, First Out, son contraire est la méthode *FIFO* pour First In, First Out qui peut être représentée par une file (une file de personnes qui attends au guichet de la gare par exemple).

Comme déjà vu auparavant, le rôle du registre SP est simple, il pointe toujours vers le sommet de la pile. Par contre, le rôle du registre BP est plus difficile à comprendre. Lorsque le programme doit exécuter une fonction, certaines informations sont empilées. On retrouve les variables passées en paramètre à cette fonction, les variables locales à cette fonction ainsi que l'adresse de retour (c'est à dire l'adresse de l'instruction à exécuter une fois la fonction terminée). Ce bloc d'information est nommé _contexte_ ou _bloc d'activation_. Le registre BP va alors pointer au début de ce bloc d'activation et permettre de faire référence aux informations concernées. Étant donné qu'il est possible qu'une fonction en appelle une autre, la pile peut contenir alors plusieurs blocs d'activation.

**Note** : Une information supplémentaire est présente au sein d'un bloc d'activation il s'agit de la valeur SFP (Saved Frame Pointer) qui pointe vers l'ancienne position du registre BP afin de lui redonner sa valeur originelle à la fin de l'appel de la fonction.

## Exécution d'un programme
Lorsque le programme s'exécute (pour rappel, les instructions sont stockées en mémoire dans le segment _.text_), le registre IP va pointer vers la première instruction du programme, autrement dit, IP aura pour valeur l'adresse de la première instruction du programme. Pour la suite de l'exécution du programme, l'algorithme concernant le registre IP sera semblable à ceci :
1. Lire la valeur du registre IP (adresse de la prochaine instruction à exécuter).
2. Additionner la taille de l'instruction à l'adresse stockée dans IP (afin de pointer vers la prochaine instruction).
3. Exécuter l'instruction lue à l'étape 1.
4. Retourner à l'étape 1.

## Les architectures 32 bits et 64 bits
Les noms des registres varient légèrement (mais suivent une certaine logique) pour les architectures 32 bits et 64 bits. Voici ces modifications regroupées dans les tableaux suivants :

|    16 bits    |     32 bits     |     64 bits    |
| :------------ | :-------------: | -------------: |
|       AX      |        EAX      |      RAX       |
|       BX      |        EBX      |      RBX       |
|       CX      |        ECX      |      RCX       |
|       DX      |        EDX      |      RDX       |

|    16 bits    |     32 bits     |     64 bits    |
| :-----------: | :-------------: | :------------: |
|       SI      |        ESI      |      RSI       |
|       DI      |        EDI      |      RDI       |

|    16 bits    |     32 bits     |     64 bits    |
| :-----------: | :-------------: | :------------: |
|       IP      |        EIP      |      RIP       |
|       BP      |        EBP      |      RBP       |
|       SP      |        ESP      |      RSP       |

|    16 bits    |     32 bits     |     64 bits    |
| :-----------: | :-------------: | :------------: |
|     FLAGS     |      EFLAGS     |     RFLAGS     |

* Concernant l’architecture 32 bits le *E* signifie *Extended*.
* Concernant l’architecture 64 bits le *R* signifie *Re-Extended*.

## Sources
* [https://openclassrooms.com/courses/en-profondeur-avec-l-assembleur](https://openclassrooms.com/courses/en-profondeur-avec-l-assembleur)
* [https://www.eyrolles.com/Informatique/Livre/techniques-de-hacking-9782744066962](https://www.eyrolles.com/Informatique/Livre/techniques-de-hacking-9782744066962)
* [https://benoit-m.developpez.com/assembleur/tutoriel/](https://benoit-m.developpez.com/assembleur/tutoriel/)
* [http://www.lacl.fr/tan/asm](http://www.lacl.fr/tan/asm)




